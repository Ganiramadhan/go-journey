basePath: /
definitions:
  model.User:
    properties:
      created_at:
        type: string
      esign_id:
        type: string
      esign_status_id:
        type: string
      full_name:
        type: string
      id:
        type: string
      register_date:
        type: string
      role:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  res.Response:
    properties:
      data: {}
      error:
        type: string
      message:
        type: string
      status:
        type: string
      success:
        type: boolean
    type: object
  validation.CreateUserRequest:
    properties:
      esignId:
        type: string
      esignStatusId:
        type: string
      fullName:
        minLength: 3
        type: string
      password:
        minLength: 6
        type: string
      registerDate:
        type: string
      role:
        type: string
      username:
        minLength: 3
        type: string
    required:
    - fullName
    - password
    - username
    type: object
  validation.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  validation.RefreshRequest:
    properties:
      refreshToken:
        type: string
    required:
    - refreshToken
    type: object
  validation.RegisterRequest:
    properties:
      full_name:
        type: string
      password:
        minLength: 6
        type: string
      role:
        type: string
      username:
        type: string
    required:
    - full_name
    - password
    - username
    type: object
  validation.UpdateUserRequest:
    properties:
      esignId:
        type: string
      esignStatusId:
        type: string
      fullName:
        minLength: 3
        type: string
      password:
        minLength: 6
        type: string
      role:
        type: string
      username:
        minLength: 3
        type: string
    type: object
host: 127.0.0.1:8080
info:
  contact: {}
  description: API service for managing users
  title: User API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login with username and password, returns access & refresh tokens
      parameters:
      - description: Login payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/validation.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/res.Response'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/res.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.Response'
      summary: Login user
      tags:
      - Auth
  /auth/logout:
    post:
      description: Logout user (invalidate refresh token)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
      security:
      - Bearer: []
      summary: Logout user
      tags:
      - Auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Use refresh token to get a new access token
      parameters:
      - description: Refresh token payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/validation.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/res.Response'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/res.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.Response'
      summary: Refresh access token
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with role 'user' or 'admin'
      parameters:
      - description: Register payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/validation.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/res.Response'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.Response'
      summary: Register a new user
      tags:
      - Auth
  /users:
    get:
      description: Get list of users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/res.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.User'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.Response'
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with username, fullname and password
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/validation.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/res.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.Response'
      security:
      - Bearer: []
      summary: Create new user
      tags:
      - users
  /users/{id}:
    delete:
      description: Delete user by ID (UUID)
      parameters:
      - description: User UUID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/res.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.Response'
      security:
      - Bearer: []
      summary: Delete user
      tags:
      - users
    get:
      description: Get user detail by ID (UUID)
      parameters:
      - description: User UUID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/res.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/res.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.Response'
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user by ID (UUID)
      parameters:
      - description: User UUID
        in: path
        name: id
        required: true
        type: string
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/validation.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/res.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/res.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.Response'
      summary: Update user
      tags:
      - users
securityDefinitions:
  Bearer:
    description: Type "Bearer {your token}" (without quotes)
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
